{"version":3,"sources":["utils/keyMirror.ts","containers/Controls/constants.ts","containers/Controls/reducer.ts","utils/createMines.ts","containers/GameField/constants.ts","containers/GameField/reducer.ts","rootReducer.ts","containers/Cell/constants.ts","services/Minesweeper.ts","utils/convertDataToField.ts","containers/GameField/actions.ts","containers/Cell/sagas/openItem.ts","containers/Cell/sagas/index.ts","containers/Controls/actions.ts","containers/Controls/sagas/finishGame.ts","containers/GameField/selectors.ts","utils/canOpenItem.ts","utils/traverseField.ts","services/updateGameField.ts","utils/detectMinesAround.ts","utils/getAmountOfCells.ts","utils/getItems.ts","utils/detectAllMines.ts","utils/validateField.ts","utils/checkAssumptions.ts","services/MinesweeperSolving/runObviousSolving.ts","services/MinesweeperSolving/startToSolve.ts","services/MinesweeperSolving/tryToSolve.ts","services/MinesweeperSolving/solveUntilWin.ts","containers/Controls/selectors.ts","containers/Controls/sagas/solveUntilWin.ts","containers/Controls/sagas/startOver.ts","containers/Controls/sagas/tryToSolveAutomatically.ts","containers/Controls/sagas/index.ts","constant/index.ts","containers/GameField/sagas/startGame.ts","containers/GameField/sagas/index.ts","rootSaga.ts","store.ts","components/Controls/index.tsx","containers/Controls/index.ts","components/Cell/index.tsx","containers/Cell/index.ts","containers/Cell/actions.ts","components/Row/index.tsx","components/GameField/index.tsx","containers/GameField/index.ts","components/Game/index.tsx","App.tsx","index.tsx","components/Controls/styles.module.scss","components/GameField/styles.module.scss","components/Game/styles.module.scss","components/Cell/styles.module.scss"],"names":["keyMirror","obj","prefix","result","key","ActionType","FINISH_GAME","SET_GAME_LEVEL","SET_GAME_LOADING","SET_RENDER_WHILE_SOLVING_VALUE","SOLVE_UNTIL_WIN","START_OVER","TRY_TO_SOLVE_AUTOMATICALLY","initialState","gameLevel","loading","renderWhileSolving","reducer","state","action","type","setGameLevel","setGameLoading","setRenderWhileSolvingValue","payload","createMines","field","Array","from","length","map","x","fill","SET_FIELD","SET_MINES","SET_MINE","START_GAME","mines","console","log","setField","setMines","setMine","y","value","row","rowIndex","cell","cellIndex","rootReducer","combineReducers","controls","gameField","OPEN_ITEM","minesweeper","getMinesweeper","Error","startMinesweeper","url","Promise","resolve","reject","socket","WebSocket","onopen","Minesweeper","onclose","event","onerror","callbacks","onMessage","response","String","data","includes","send","startsWith","trimedField","trim","slice","indexOf","split","item","itemNumber","Number","isNaN","convertDataToField","onmessage","this","level","close","message","reason","openItem","call","put","warn","alert","effects","takeLatest","finishGame","confirm","finish","canOpenItem","traverseField","callback","skipUnusefulItems","yLength","xLength","stop","updateGameField","store","dispatch","cloneDeep","detectMinesAround","closedItemsAround","detected","forEach","getAmountOfClosedCells","getAmountOfParticularCells","getAmountOfMines","conditionCallback","reduce","sum","getItemsAround","itemsAround","prevY","push","nextY","getClosedItems","items","filter","getMines","getCanOpenItems","detectAllMines","amountOfClosedCells","newAmountOfClosedCells","amountOfMines","newAmountOfMines","validateField","isValid","minesAroundLength","canOpenItemsLength","checkAssumptions","originalField","originalMines","cache","minesAround","canOpenItems","pop","cacheKey","getCacheKey","isValidField","args","join","runObviousSolving","a","resultField","resultMines","rowLength","closedItemsAroundLength","itemsToOpenAround","i","itemsToOpenAroundLength","startToSolve","itemsNumber","Math","floor","openedCellsCount","start","tryToSolve","nested","itemToOpen","solveUntilWin","currentField","currentMines","clickRandomItem","select","controlsSelectors","gameFiledSelectors","solve","startOver","tryToSolveAutomatically","GameLevel","LevelLabelByLevel","Level_1","Level_2","Level_3","Level_4","GAME_LEVELS","startGame","rootSaga","cellSagas","controlsSagas","gameFieldSagas","all","sagaMiddleware","createSagaMiddleware","createStore","composeWithDevTools","applyMiddleware","run","Controls","disabled","className","styles","controlsContainer","column","onClick","checkbox","id","onChange","checked","htmlFor","info","mapDispatchToProps","connect","Cell","mine","OpenedCell","title","onContextMenu","preventDefault","Row","GameField","useState","selectedLevel","setLevel","style","gridTemplateColumns","gridAutoRows","index","chooseLevel","option","getRadioButton","label","name","target","Game","gameTitle","main","App","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.99a177df.chunk.js","sourcesContent":["\nexport function keyMirror<T extends object>(obj: T, prefix: string): Record<keyof T, string> {\n  const result = {} as Record<keyof T, string>;\n\n  for (const key in obj) {\n    result[key] = `${prefix}_${key}`;\n  }\n\n  return result;\n}\n","import { keyMirror } from 'utils/keyMirror';\n\nexport const ActionType = keyMirror(\n  {\n    FINISH_GAME: null,\n    SET_GAME_LEVEL: null,\n    SET_GAME_LOADING: null,\n    SET_RENDER_WHILE_SOLVING_VALUE: null,\n    SOLVE_UNTIL_WIN: null,\n    START_OVER: null,\n    TRY_TO_SOLVE_AUTOMATICALLY: null,\n  },\n  'Controls',\n);\n","import { Reducer } from 'redux';\n\nimport { IAction } from 'models';\nimport { ActionType } from './constants';\nimport { State, Action } from './models';\n\nconst initialState: State = {\n  gameLevel: null,\n  loading: false,\n  renderWhileSolving: false,\n};\n\nconst reducer: Reducer<State, IAction> = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionType.SET_GAME_LEVEL:\n      return setGameLevel(state, action);\n    case ActionType.SET_GAME_LOADING:\n      return setGameLoading(state, action);\n    case ActionType.SET_RENDER_WHILE_SOLVING_VALUE:\n      return setRenderWhileSolvingValue(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\nexport const setGameLevel: Reducer<State, Action.SetGameLevel> = (state, { payload: { gameLevel } }) => ({\n  ...state,\n  gameLevel,\n});\n\nexport const setGameLoading: Reducer<State, Action.SetGameLoading> = (state, { payload: { loading } }) => ({\n  ...state,\n  loading,\n});\n\nexport const setRenderWhileSolvingValue: Reducer<State, Action.SetRenderWhileSolvingValue> = (state, { payload: { renderWhileSolving } }) => ({\n  ...state,\n  renderWhileSolving,\n});\n","import { Field, Mines } from 'models';\n\nexport function createMines(field: Field): Mines {\n  return Array.from<boolean[]>({ length: field.length }).map(x => Array.from<boolean>({ length: field[0].length }).fill(false));\n}\n","import { keyMirror } from 'utils/keyMirror';\n\nexport const ActionType = keyMirror(\n  {\n    SET_FIELD: null,\n    SET_MINES: null,\n    SET_MINE: null,\n    START_GAME: null,\n  },\n  'GameField',\n);\n","import { Reducer } from 'redux';\n\nimport { createMines } from 'utils/createMines';\nimport { ActionType } from './constants';\nimport { State } from './models';\n\nconst initialState: State = {\n  field: [[]],\n  mines: [[]],\n};\n\nconst reducer = (state = initialState, action) => {\n  console.log('my ACTION', action);\n  switch (action.type) {\n    case ActionType.SET_FIELD:\n      return setField(state, action);\n    case ActionType.SET_MINES:\n      return setMines(state, action);\n    case ActionType.SET_MINE:\n      return setMine(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\nexport const setField: Reducer<State> = (state, { payload: { field } }) => {\n  let { mines } = state;\n\n  if (mines[0].length === 0) {\n    mines = createMines(field);\n  }\n\n  return {\n    ...state,\n    field,\n    mines,\n  };\n};\n\nexport const setMines = (state, { payload: { mines } }) => {\n  return {\n    ...state,\n    mines,\n  };\n};\n\nexport const setMine = (state, { payload: { x, y, value } }) => {\n  return {\n    ...state,\n    mines: state.mines.map((row, rowIndex) => rowIndex === y ? row.map((cell, cellIndex) => cellIndex === x ? value : cell) : row),\n  };\n};\n","\nimport { combineReducers } from 'redux';\n\nimport controls from 'containers/Controls/reducer';\nimport gameField from 'containers/GameField/reducer';\n\nconst rootReducer = combineReducers({\n  controls,\n  gameField,\n});\n\nexport default rootReducer;\n","import { keyMirror } from 'utils/keyMirror';\n\nexport const ActionType = keyMirror(\n  {\n    OPEN_ITEM: null,\n  },\n  'Cell',\n);\n","import { GameLevel } from 'constant';\nimport { Field } from 'models';\nimport { convertDataToField } from 'utils/convertDataToField';\n\nlet minesweeper: Minesweeper = null;\n\nexport function getMinesweeper(): Minesweeper {\n  if (minesweeper) {\n    return minesweeper;\n  }\n\n  throw new Error('Game finished!');\n}\n\nexport function startMinesweeper(url: string): Promise<Minesweeper> {\n  return new Promise((resolve, reject) => {\n    const socket = new WebSocket(url);\n\n    socket.onopen = () => {\n      minesweeper = new Minesweeper(socket);\n      resolve(minesweeper);\n    };\n\n    socket.onclose = (event) => {\n      reject(event);\n    };\n\n    socket.onerror = (event) => {\n      reject(event);\n    };\n  });\n}\n\nexport class Minesweeper {\n  // TODO type\n  private callbacks: {\n    resolve: (value?: any) => void,\n    reject: (reason?: any) => void,\n  } | null = null;\n\n  constructor(\n    private socket: WebSocket,\n  ) {\n    console.log('socket', socket);\n    socket.onopen = null;\n\n    socket.onmessage = this.onMessage;\n\n    socket.onclose = (event) => {\n      this.reject(event);\n    };\n\n    socket.onerror = (event) => {\n      this.reject(event);\n    };\n  }\n\n  public start(level: GameLevel): Promise<Field> {\n    return this.send<Field>(`new ${level}`);\n  }\n\n  public openItem(x: number, y: number): Promise<Field> {\n    return this.send<Field>(`open ${x} ${y}`);\n  }\n\n  public async finish(): Promise<void> {\n    minesweeper = null;\n    return this.socket.close();\n  }\n\n  private send<T>(message: string): Promise<T> {\n    return new Promise((resolve, reject) => {\n      if (!this.socket) {\n        reject('Game finished!');\n      }\n\n      this.callbacks = {\n        resolve,\n        reject,\n      };\n      this.socket.send(message);\n    });\n  }\n\n  private onMessage = (event: MessageEvent): void => {\n    const response = String(event.data);\n    console.log('DATA', response)\n    console.log('DATA socket', this.socket)\n\n    switch (true) {\n      case ['new: OK', 'open: OK'].includes(response): {\n        this.socket.send('map');\n        break;\n      }\n\n      case response.startsWith('map'): {\n        const field = convertDataToField(response);\n        this.resolve(field);\n        break;\n      }\n\n      case response.includes('You lose'): {\n        this.reject(response);\n        break;\n      }\n\n      case response.includes('You win'): {\n        this.reject(response);\n        break;\n      }\n\n      default: {\n        // just in case - in order to avoid hanging of promises\n        this.resolve();\n      }\n    }\n  }\n\n  private resolve(value?): void {\n    if (this.callbacks) {\n      this.callbacks.resolve(value);\n      this.callbacks = null;\n    }\n  }\n\n  private reject(reason?): void {\n    if (this.callbacks) {\n      this.callbacks.reject(reason);\n      this.callbacks = null;\n    }\n  }\n}\n\n// L = 1, 10*10, mines = 15\n// You win. The password for this level is: ThisWasEasy\n\n// L = 2, 40*20, mines = 150\n// open: You win. The password for this level is: NotSoMuch\n\n// L = 3, 100*50, mines = 1000\n// open: You win. The password for this level is: NoMoreMines\n\n// L = 4, 500*50, mines = 3500\n// open: You win. The password for this level is: PleaseNoMore\n","import { Field } from 'models';\n\nexport function convertDataToField(field: string): Field {\n  const trimedField = field.trim();\n\n  return trimedField\n    .slice(trimedField.indexOf('\\n') + 1)\n    .split('\\n')\n    .map(row => row.trim().split('').map(item => {\n      const itemNumber = Number(item);\n\n      return isNaN(itemNumber) ? -1 : itemNumber;\n    }));\n}\n","import { ActionType } from './constants';\nimport { ActionCreator } from './models';\n\nexport const setField: ActionCreator.SetField = (field) => ({\n  type: ActionType.SET_FIELD,\n  payload: {\n    field,\n  },\n});\n\nexport const setMines: ActionCreator.SetMines = (mines) => ({\n  type: ActionType.SET_MINES,\n  payload: {\n    mines,\n  },\n});\n\nexport const setMine: ActionCreator.SetMine = (x, y, value) => ({\n  type: ActionType.SET_MINE,\n  payload: {\n    x,\n    y,\n    value,\n  },\n});\n\nexport const startGame: ActionCreator.StartGame = (level) => ({\n  type: ActionType.START_GAME,\n  payload: {\n    level,\n  },\n});\n","import { call, put } from 'redux-saga/effects';\n\nimport { getMinesweeper } from 'services/Minesweeper';\nimport { setField } from 'containers/GameField/actions';\nimport { Action } from '../models';\n\nexport function* openItem(action: Action.OpenItem) {\n  try {\n    const { x, y } = action.payload;\n\n    const minesweeper: ReturnSagaType<typeof getMinesweeper> = yield call(getMinesweeper);\n    const field: ReturnSagaType<typeof minesweeper.openItem> = yield call([minesweeper, minesweeper.openItem], x, y);\n\n    yield put(setField(field));\n  } catch (error) {\n    console.warn('Error occurred during opening item', action, error);\n    alert(error);\n  }\n}\n","import { takeLatest, Effect } from 'redux-saga/effects';\n\nimport { ActionType } from '../constants';\nimport { openItem } from './openItem';\n\nconst effects: Effect[] = [\n  takeLatest(ActionType.OPEN_ITEM, openItem),\n];\n\nexport default effects;\n","import { ActionType } from './constants';\nimport { ActionCreator } from './models';\n\nexport const finishGame: ActionCreator.FinishGame = () => ({\n  type: ActionType.FINISH_GAME,\n});\n\nexport const setGameLevel: ActionCreator.SetGameLevel = (gameLevel) => ({\n  type: ActionType.SET_GAME_LEVEL,\n  payload: {\n    gameLevel,\n  },\n});\n\nexport const setGameLoading: ActionCreator.SetGameLoading = (loading) => ({\n  type: ActionType.SET_GAME_LOADING,\n  payload: {\n    loading,\n  },\n});\n\nexport const setRenderWhileSolvingValue: ActionCreator.SetRenderWhileSolvingValue = (renderWhileSolving) => ({\n  type: ActionType.SET_RENDER_WHILE_SOLVING_VALUE,\n  payload: {\n    renderWhileSolving,\n  },\n});\n\nexport const solveUntilWin: ActionCreator.SolveUntilWin = () => ({\n  type: ActionType.SOLVE_UNTIL_WIN,\n});\n\nexport const startOver: ActionCreator.StartOver = () => ({\n  type: ActionType.START_OVER,\n});\n\nexport const tryToSolveAutomatically: ActionCreator.TryToSolveAutomatically = () => ({\n  type: ActionType.TRY_TO_SOLVE_AUTOMATICALLY,\n});\n","import { call, put } from 'redux-saga/effects';\n\nimport { setGameLevel } from 'containers/Controls/actions';\nimport { setField, setMines } from 'containers/GameField/actions';\nimport { getMinesweeper } from 'services/Minesweeper';\nimport { Action } from '../models';\n\nexport function* finishGame(action: Action.StartOver) {\n  try {\n    const confirmed = confirm('Do you want to finish current game?');\n    if (!confirmed) {\n      return;\n    }\n\n    const minesweeper = getMinesweeper();\n    yield call([minesweeper, minesweeper.finish]);\n\n    yield put(setField([[]]));\n    yield put(setMines([[]]));\n    yield put(setGameLevel(null));\n  } catch (error) {\n    console.warn('Error occurred during finishing the game.', action, error);\n    alert('Error occurred. Please reload the page.');\n  }\n}\n","// import { } from 'models';\nimport { State} from './models';\n\n\n// TODO: types\n// TODO: use\nexport const gameField = (state): State => state.gameField;\n\nexport const field = (state) => gameField(state).field;\nexport const mines = (state) => gameField(state).mines;\n","import { Field, Mines } from 'models';\n\nexport function canOpenItem(x: number, y: number, field: Field, mines: Mines): boolean {\n  return field[y][x] === -1 && !mines[y][x];\n}\n","type TraverseCallback<T = void> = (\n  item: number,\n  x: number,\n  y: number,\n  xLength: number,\n  yLength: number,\n) => T;\n\nexport function traverseField<T = void>(field: number[][], callback: TraverseCallback<T>, skipUnusefulItems = true): T {\n  for (let y = 0, yLength = field.length; y < yLength; y++) {\n    const row = field[y];\n\n    for (let x = 0, xLength = row.length; x < xLength; x++) {\n      const item = row[x];\n\n      if (skipUnusefulItems && item <= 0) {\n        continue;\n      }\n\n      const stop = callback(item, x, y, xLength, yLength);\n\n      if (stop) {\n        return stop;\n      }\n    }\n  }\n}\n","import cloneDeep from 'lodash/cloneDeep';\n\nimport { setField, setMines } from 'containers/GameField/actions';\nimport store from 'store';\nimport { Field, Mines } from 'models';\n\nexport const updateGameField = (field: Field, mines?: Mines): void => {\n  field && store.dispatch(setField(field));\n  mines && store.dispatch(setMines(cloneDeep(mines)));\n};\n","/**\n * Mutate mines array\n * Returs whether any mine detected or not\n */\nexport function detectMinesAround(item: number, closedItemsAround: [number, number][], mines: boolean[][]): boolean {\n  let detected = false;\n\n  if (item === closedItemsAround.length) {\n    closedItemsAround.forEach(([x, y]) => {\n      if (!mines[y][x]) {\n        console.log('MINE', x, y);\n        detected = true;\n        mines[y][x] = true;\n      }\n    })\n  }\n\n  return detected;\n}\n","import { Field, Mines } from 'models';\n\nexport function getAmountOfClosedCells(field: Field): number {\n  return getAmountOfParticularCells(field, (item) => item === -1);\n}\n\nexport function getAmountOfMines(mines: Mines): number {\n  return getAmountOfParticularCells(mines, item => item);\n}\n\nfunction getAmountOfParticularCells(field: Field, conditionCallback: (item: number, x: number, y: number) => boolean): number;\nfunction getAmountOfParticularCells(mines: Mines, conditionCallback: (item: boolean, x: number, y: number) => boolean): number;\nfunction getAmountOfParticularCells(field: any[][], conditionCallback: (item, x: number, y: number) => boolean): number {\n  return field.reduce((sum, row, y) => sum + row.reduce((sum, item, x) => sum + (conditionCallback(item, x, y) ? 1 : 0), 0), 0);\n}\n","import { canOpenItem } from './canOpenItem';\n\nexport function getItemsAround(x: number, y: number, xLength: number, yLength: number): [number, number][] {\n  const itemsAround = [] as [number, number][];\n\n  // three items above\n  const prevY = y - 1;\n  if (y > 0) {\n    if (x > 0) {\n      // console.log('#1', x - 1, prevY);\n      itemsAround.push([x - 1, prevY]);\n    }\n\n    // console.log('#2', x, prevY);\n    itemsAround.push([x, prevY]);\n\n    if (x < xLength - 1) {\n      // console.log('#3', x + 1, prevY);\n      itemsAround.push([x + 1, prevY]);\n    }\n  }\n\n  // left item\n  if (x > 0) {\n    // console.log('#4', x - 1, y);\n    itemsAround.push([x - 1, y]);\n  }\n\n  // right item\n  if (x < xLength - 1) {\n    // console.log('#5', x + 1, y);\n    itemsAround.push([x + 1, y]);\n  }\n\n  // three items under\n  const nextY = y + 1;\n  if (nextY < yLength) {\n    if (x > 0) {\n      // console.log('#6', x - 1, nextY);\n      itemsAround.push([x - 1, nextY]);\n    }\n\n    // console.log('#7', x, nextY);\n    itemsAround.push([x, nextY]);\n\n    if (x < xLength - 1) {\n      // console.log('#8', x + 1, nextY);\n      itemsAround.push([x + 1, nextY]);\n    }\n  }\n\n  return itemsAround;\n}\n\nexport function getClosedItems(items: [number, number][], field: number[][]): [number, number][] {\n  return items.filter(([x, y]) => field[y][x] === -1);\n}\n\nexport function getMines(items: [number, number][], mines: boolean[][]): [number, number][] {\n  return items.filter(([x, y]) => mines[y][x]);\n}\n\nexport function getCanOpenItems(items: [number, number][], field: number[][], mines: boolean[][]): [number, number][] {\n  return items.filter(([x, y]) => canOpenItem(x, y, field, mines));\n}\n","import { Field, Mines } from 'models';\nimport { detectMinesAround } from './detectMinesAround';\nimport { getAmountOfClosedCells, getAmountOfMines } from './getAmountOfCells';\nimport { getClosedItems, getItemsAround, getMines, getCanOpenItems } from './getItems';\nimport { traverseField } from './traverseField';\n\nexport function detectAllMines(field: Field, mines: Mines): void {\n  let amountOfClosedCells = getAmountOfClosedCells(field);\n  let newAmountOfClosedCells: number = null;\n  let amountOfMines = getAmountOfMines(mines);\n  let newAmountOfMines: number = null;\n\n  do {\n    if (newAmountOfClosedCells) {\n      amountOfClosedCells = newAmountOfClosedCells;\n      newAmountOfClosedCells = null;\n    }\n    if (newAmountOfMines) {\n      amountOfMines = newAmountOfMines;\n      newAmountOfMines = null;\n    }\n\n    traverseField(field, (item, x, y, xLength, yLength) => {\n      const itemsAround = getItemsAround(x, y, xLength, yLength);\n      const closedItemsAround = getClosedItems(itemsAround, field);\n      detectMinesAround(item, closedItemsAround, mines);\n\n      // open items\n      const minesAround = getMines(itemsAround, mines);\n      if (minesAround.length === item) {\n        const canOpenItems = getCanOpenItems(itemsAround, field, mines);\n        canOpenItems.forEach(([x, y]) => {\n          field[y][x] = 0;\n        });\n      }\n    });\n\n    newAmountOfClosedCells = getAmountOfClosedCells(field);\n    newAmountOfMines = getAmountOfMines(mines);\n  } while (newAmountOfClosedCells < amountOfClosedCells || newAmountOfMines > amountOfMines);\n}\n","import { traverseField } from './traverseField';\nimport { getItemsAround, getMines, getCanOpenItems } from './getItems';\n\nexport function validateField(field: number[][], mines: boolean[][]): boolean {\n  let isValid = true;\n\n  traverseField<boolean>(field, (item, x, y, xLength, yLength) => {\n    const itemsAround = getItemsAround(x, y, xLength, yLength);\n    const minesAround = getMines(itemsAround, mines);\n    const minesAroundLength = minesAround.length;\n    const canOpenItems = getCanOpenItems(itemsAround, field, mines);\n    const canOpenItemsLength = canOpenItems.length;\n    // console.warn('VALIDATE - item, x, y', item, x, y);\n\n    if (minesAroundLength > item || (canOpenItemsLength + minesAroundLength) < item) {\n      isValid = false;\n\n      return true;\n    }\n  });\n\n  return isValid;\n}\n","import cloneDeep from 'lodash/cloneDeep';\n\nimport { detectAllMines } from './detectAllMines';\nimport { getItemsAround, getMines, getCanOpenItems } from './getItems';\nimport { validateField } from './validateField';\n\nexport function checkAssumptions(originalField: number[][], originalMines: boolean[][]): [number, number] | void {\n  console.warn('************ ASSUMPTIONS');\n  const cache: Record<string, boolean> = {};\n\n  for (let y = 0, yLength = originalField.length; y < yLength; y++) {\n    const row = originalField[y];\n\n    for (let x = 0, xLength = row.length; x < xLength; x++) {\n      const item = row[x];\n\n      const itemsAround = getItemsAround(x, y, xLength, yLength);\n      const minesAround = getMines(itemsAround, originalMines);\n      const canOpenItems = getCanOpenItems(itemsAround, originalField, originalMines);\n      // amount of the rest of mines around current item to find\n      const minesLeftNumber = item - minesAround.length;\n\n      if (minesLeftNumber === 1) {\n        console.log('x, y, item', x, y, item);\n\n        while (canOpenItems.length > 0) {\n          // item to mark as mine\n          const [x, y] = canOpenItems.pop();\n\n          const cacheKey = getCacheKey(x, y);\n          const hasBeenProcessed = cache[cacheKey];\n          if (hasBeenProcessed) {\n            continue;\n          } else {\n            cache[cacheKey] = true;\n          }\n\n          const field = cloneDeep(originalField);\n          const mines = cloneDeep(originalMines);\n          mines[y][x] = true;\n\n          detectAllMines(field, mines);\n          const isValidField = validateField(field, mines);\n          console.warn('valid', isValidField, x, y, );\n\n          if (!isValidField) {\n            return [x, y];\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction getCacheKey(...args: number[]): string {\n  return args.join(',');\n}\n\n// function getAllCombinations(items: [number, number][]): [[number, number], [number, number]][] {\n//   const result = [] as [[number, number], [number, number]][];\n\n//   for (let i = 0, itemsLength = items.length; i < itemsLength; i++) {\n//     const first = items[i];\n\n//     for (let j = i + 1; j < itemsLength; j++) {\n//       result.push([first, items[j]]);\n//     }\n//   }\n\n//   return result;\n// }\n\n// function checkAllAssumptions() {\n//   for (let i = 1; i < 3; i++) {\n\n//   }\n// }\n","import { Field, Mines } from 'models';\nimport { canOpenItem } from 'utils/canOpenItem';\nimport { detectMinesAround } from 'utils/detectMinesAround';\nimport { getAmountOfClosedCells, getAmountOfMines } from 'utils/getAmountOfCells';\nimport { getClosedItems, getItemsAround, getMines, getCanOpenItems } from 'utils/getItems';\nimport { Minesweeper } from '../Minesweeper';\nimport { updateGameField } from '../updateGameField';\n\nexport async function runObviousSolving(minesweeper: Minesweeper, field: Field, mines: Mines, renderWhileSolving: boolean): Promise<Field> {\n  let resultField = field;\n  let resultMines = mines;\n  let amountOfClosedCells = getAmountOfClosedCells(field);\n  let newAmountOfClosedCells: number = null;\n  let amountOfMines = getAmountOfMines(mines);\n  let newAmountOfMines: number = null;\n\n  try {\n    do {\n      if (newAmountOfClosedCells) {\n        amountOfClosedCells = newAmountOfClosedCells;\n        newAmountOfClosedCells = null;\n      }\n      if (newAmountOfMines) {\n        amountOfMines = newAmountOfMines;\n        newAmountOfMines = null;\n      }\n\n      for (let y = 0, length = resultField.length; y < length; y++) {\n        const row = resultField[y];\n\n        for (let x = 0, rowLength = row.length; x < rowLength; x++) {\n          const item = row[x];\n\n          if (item <= 0) {\n            continue;\n          }\n\n          const itemsAround = getItemsAround(x, y, rowLength, length);\n          const closedItemsAround = getClosedItems(itemsAround, resultField);\n          const closedItemsAroundLength = closedItemsAround.length;\n\n          if (closedItemsAroundLength === 0) {\n            continue;\n          }\n\n          // FIRST detect mines\n          const detected = detectMinesAround(item, closedItemsAround, resultMines);\n          renderWhileSolving && detected && updateGameField(null, resultMines);\n\n          // SECOND open cells without mines\n          const minesAround = getMines(itemsAround, resultMines);\n          const minesAroundLength = minesAround.length;\n\n          if (minesAroundLength === closedItemsAroundLength) {\n            continue;\n          }\n\n          if (item === minesAroundLength) {\n            const itemsToOpenAround = getCanOpenItems(itemsAround, resultField, resultMines);\n\n            for (let i = 0, itemsToOpenAroundLength = itemsToOpenAround.length; i < itemsToOpenAroundLength; i++) {\n              const [x, y] = itemsToOpenAround[i];\n\n              if (canOpenItem(x, y, resultField, resultMines)) {\n                resultField = await minesweeper.openItem(x, y);\n                renderWhileSolving && updateGameField(resultField);\n              }\n            }\n          }\n        }\n      }\n\n      newAmountOfClosedCells = getAmountOfClosedCells(resultField);\n      newAmountOfMines = getAmountOfMines(resultMines);\n    } while (newAmountOfClosedCells < amountOfClosedCells || newAmountOfMines > amountOfMines);\n  } catch (error) {\n    console.warn('Error occurred during obvious solving.', error);\n    throw error;\n  }\n\n  return resultField;\n}\n","import { GameLevel } from 'constant';\nimport { Field } from 'models';\nimport { getAmountOfClosedCells } from 'utils/getAmountOfCells';\nimport { Minesweeper } from '../Minesweeper';\nimport { updateGameField } from '../updateGameField';\n\nexport async function startToSolve(minesweeper: Minesweeper, field: Field, level: GameLevel, renderWhileSolving: boolean): Promise<Field> {\n  let amountOfClosedCells = getAmountOfClosedCells(field);\n  let resultField = field;\n  const yLength = resultField.length;\n  const xLength = resultField[0].length;\n  const itemsNumber = yLength * xLength;\n\n  if (amountOfClosedCells !== itemsNumber) {\n    return resultField;\n  }\n\n  // TODO\n  let x = Math.floor(xLength / 2);\n  const y = Math.floor(yLength / 2);\n\n  let openedCellsCount = 0;\n\n  try {\n    do {\n      resultField = await minesweeper.openItem(x, y);\n      renderWhileSolving && updateGameField(resultField);\n      amountOfClosedCells = getAmountOfClosedCells(resultField);\n      openedCellsCount++;\n      x++;\n\n      if (x >= xLength) {\n        x = 0;\n      }\n      if (resultField[y][x] !== -1) {\n        return resultField;\n      }\n    } while (itemsNumber - openedCellsCount === amountOfClosedCells);\n  } catch (error) {\n    resultField = await minesweeper.start(level);\n\n    return startToSolve(minesweeper, resultField, level, renderWhileSolving);\n  }\n\n  return resultField;\n}\n","import cloneDeep from 'lodash/cloneDeep';\n\nimport { GameLevel } from 'constant';\nimport { Field, Mines } from 'models';\nimport { checkAssumptions } from 'utils/checkAssumptions';\nimport { Minesweeper } from '../Minesweeper';\nimport { updateGameField } from '../updateGameField';\nimport { runObviousSolving } from './runObviousSolving';\nimport { startToSolve } from './startToSolve';\n\ninterface TryToSolveResult {\n  field: Field,\n  mines: Mines,\n}\n\nexport async function tryToSolve(\n  minesweeper: Minesweeper,\n  field: Field,\n  mines: Mines,\n  level: GameLevel,\n  renderWhileSolving: boolean,\n  nested: boolean,\n): Promise<TryToSolveResult> {\n  let resultField = field;\n  let resultMines = nested ? mines : cloneDeep(mines);\n\n  try {\n    resultField = await startToSolve(minesweeper, resultField, level, renderWhileSolving);\n    resultField = await runObviousSolving(minesweeper, resultField, resultMines, renderWhileSolving);\n\n\n    let itemToOpen = checkAssumptions(resultField, resultMines);\n    while (itemToOpen) {\n      resultField = await minesweeper.openItem(...itemToOpen);\n      renderWhileSolving && updateGameField(resultField);\n      resultField = await runObviousSolving(minesweeper, resultField, resultMines, renderWhileSolving);\n\n      itemToOpen = checkAssumptions(resultField, resultMines);\n    }\n\n    return {\n      field: resultField,\n      mines: resultMines,\n    };\n  } catch (error) {\n    console.warn('Error occurred during trying to solve.', error);\n    throw error;\n  }\n}\n","import cloneDeep from 'lodash/cloneDeep';\n\nimport { GameLevel } from 'constant';\nimport { Field, Mines } from 'models';\nimport { canOpenItem } from 'utils/canOpenItem';\nimport { createMines } from 'utils/createMines';\nimport { traverseField } from 'utils/traverseField';\nimport { Minesweeper } from '../Minesweeper';\nimport { updateGameField } from '../updateGameField';\nimport { tryToSolve } from './tryToSolve';\n\nexport async function solveUntilWin(\n  minesweeper: Minesweeper,\n  currentField: Field,\n  currentMines: Mines,\n  gameLevel: GameLevel,\n  renderWhileSolving: boolean,\n): Promise<never> {\n  do {\n    let field = currentField;\n    let mines = cloneDeep(currentMines);\n\n    while (true) {\n      try {\n        ({ field, mines } = await tryToSolve(minesweeper, field, mines, gameLevel, renderWhileSolving, true));\n        field = await clickRandomItem(minesweeper, field, mines);\n        renderWhileSolving && updateGameField(field);\n      } catch (error) {\n        console.warn('*********** error');\n        console.warn(error);\n\n        if (error.includes('You win')) {\n          throw error;\n        }\n\n        field = await minesweeper.start(gameLevel);\n        mines = createMines(field);\n        renderWhileSolving && updateGameField(field, mines);\n      } finally {\n        // store.dispatch({ type: 'SET_FIELD', payload: { field } });\n        // store.dispatch({ type: 'SET_MINES', payload: { mines } });\n      }\n    }\n  } while (true);\n}\n\n\n// TODO move\nasync function clickRandomItem(minesweeper: Minesweeper, field: Field, mines: Mines): Promise<Field> {\n  const [x, y] = traverseField(field, (item, x, y) => {\n    if (canOpenItem(x, y, field, mines)) {\n      return [x, y];\n    }\n  }, false);\n  console.warn('RANDOM', x, y);\n\n  return minesweeper.openItem(x, y);\n}\n","import { State } from './models';\n\n// TODO: types\n// TODO: use\nconst controls = (state): State => state.controls;\n\nexport const gameLevel = (state) => controls(state).gameLevel;\nexport const loading = (state) => controls(state).loading;\nexport const renderWhileSolving = (state) => controls(state).renderWhileSolving;\n","import { call, select } from 'redux-saga/effects';\n\nimport * as gameFiledSelectors from 'containers/GameField/selectors';\nimport { getMinesweeper } from 'services/Minesweeper';\nimport { solveUntilWin as solve } from 'services/MinesweeperSolving/solveUntilWin';\nimport { Action } from '../models';\nimport * as controlsSelectors from '../selectors';\n\nexport function* solveUntilWin(action: Action.SolveUntilWin) {\n  try {\n    const confirmed = confirm('Are you sure you want to start solving until the win? This can take infinity...');\n    if (!confirmed) {\n      return;\n    }\n\n    const gameLevel: ReturnSagaType<typeof controlsSelectors.gameLevel> = yield select(controlsSelectors.gameLevel);\n    const renderWhileSolving: ReturnSagaType<typeof controlsSelectors.renderWhileSolving> = yield select(controlsSelectors.renderWhileSolving);\n    const field: ReturnSagaType<typeof gameFiledSelectors.field> = yield select(gameFiledSelectors.field);\n    const mines: ReturnSagaType<typeof gameFiledSelectors.mines> = yield select(gameFiledSelectors.mines);\n\n    const minesweeper = getMinesweeper();\n    yield call(solve, minesweeper, field, mines, gameLevel, renderWhileSolving);\n\n    // yield put(setField(result.field));\n    // yield put(setMines(result.mines));\n  } catch (error) {\n    console.warn('Error occurred during solving until the win.', action, error);\n    alert(error);\n  }\n}\n","import { call, put, select } from 'redux-saga/effects';\n\nimport { setField, setMines } from 'containers/GameField/actions';\nimport { getMinesweeper } from 'services/Minesweeper';\nimport { createMines } from 'utils/createMines';\nimport { Action } from '../models';\nimport * as controlsSelectors from '../selectors';\n\nexport function* startOver(action: Action.StartOver) {\n  try {\n    const confirmed = confirm('Do you want to start over this level?');\n    if (!confirmed) {\n      return;\n    }\n\n    const gameLevel: ReturnSagaType<typeof controlsSelectors.gameLevel> = yield select(controlsSelectors.gameLevel);\n\n    const minesweeper = getMinesweeper();\n    const field: ReturnSagaType<typeof minesweeper.start> = yield call([minesweeper, minesweeper.start], gameLevel);\n\n    yield put(setField(field));\n    yield put(setMines(createMines(field)));\n  } catch (error) {\n    console.warn('Error occurred during starting over.', action, error);\n    alert('Error occurred. Please reload the page.');\n  }\n}\n","import { call, put, select } from 'redux-saga/effects';\n\nimport { setField, setMines } from 'containers/GameField/actions';\nimport * as gameFiledSelectors from 'containers/GameField/selectors';\nimport { getMinesweeper } from 'services/Minesweeper';\nimport { tryToSolve } from 'services/MinesweeperSolving/tryToSolve';\nimport { Action } from '../models';\nimport * as controlsSelectors from '../selectors';\n\nexport function* tryToSolveAutomatically(action: Action.TryToSolveAutomatically) {\n  try {\n    const confirmed = confirm('Are you sure you want to try solving? This can take a lot of time...');\n    if (!confirmed) {\n      return;\n    }\n\n    const gameLevel: ReturnSagaType<typeof controlsSelectors.gameLevel> = yield select(controlsSelectors.gameLevel);\n    const renderWhileSolving: ReturnSagaType<typeof controlsSelectors.renderWhileSolving> = yield select(controlsSelectors.renderWhileSolving);\n    const field: ReturnSagaType<typeof gameFiledSelectors.field> = yield select(gameFiledSelectors.field);\n    const mines: ReturnSagaType<typeof gameFiledSelectors.mines> = yield select(gameFiledSelectors.mines);\n\n    const minesweeper = getMinesweeper();\n    const result: ReturnSagaType<typeof tryToSolve> = yield call(\n      tryToSolve,\n      minesweeper,\n      field,\n      mines,\n      gameLevel,\n      renderWhileSolving,\n      false,\n    );\n\n    yield put(setField(result.field));\n    yield put(setMines(result.mines));\n\n    alert('Unable to continue. Please select the next item manually.');\n  } catch (error) {\n    if (typeof error === 'string' && error.includes('You win')) {\n      return alert(error);\n    }\n\n    console.warn('Error occurred during opening item', action, error);\n    alert('Error occurred. Please reload the page.');\n  }\n}\n","import { takeLatest, Effect } from 'redux-saga/effects';\n\nimport { ActionType } from '../constants';\nimport { finishGame } from './finishGame';\nimport { solveUntilWin } from './solveUntilWin';\nimport { startOver } from './startOver';\nimport { tryToSolveAutomatically } from './tryToSolveAutomatically';\n\nconst effects: Effect[] = [\n  takeLatest(ActionType.FINISH_GAME, finishGame),\n  takeLatest(ActionType.TRY_TO_SOLVE_AUTOMATICALLY, tryToSolveAutomatically),\n  takeLatest(ActionType.SOLVE_UNTIL_WIN, solveUntilWin),\n  takeLatest(ActionType.START_OVER, startOver),\n];\n\nexport default effects;\n","// single constants\nexport const MINESWEEPER_URL = 'wss://hometask.eg1236.com/game1/';\n\n// enums\nexport enum GameLevel {\n  Level_1 = '1',\n  Level_2 = '2',\n  Level_3 = '3',\n  Level_4 = '4',\n}\n\n// helpers\nexport const LevelLabelByLevel: Record<GameLevel, string> = {\n  [GameLevel.Level_1]: 'Easy',\n  [GameLevel.Level_2]: 'Medium',\n  [GameLevel.Level_3]: 'Hard',\n  [GameLevel.Level_4]: 'Impossible',\n};\n\nexport const GAME_LEVELS = [GameLevel.Level_1, GameLevel.Level_2, GameLevel.Level_3, GameLevel.Level_4];\n","import { put, delay } from 'redux-saga/effects';\n\nimport { MINESWEEPER_URL } from 'constant';\nimport { Field } from 'models';\nimport { startMinesweeper, Minesweeper } from 'services/Minesweeper';\nimport { setGameLevel, setGameLoading } from 'containers/Controls/actions';\nimport { setField } from '../actions';\nimport { Action } from '../models';\n\nexport function* startGame(action: Action.StartGame) {\n  try {\n    yield put(setGameLoading(true));\n\n    const { level } = action.payload;\n\n    console.warn('SAGA', action)\n    // TODO use call\n    // TODO types\n    const minesweeper: Minesweeper = yield startMinesweeper(MINESWEEPER_URL);\n    const field: Field = yield minesweeper.start(level);\n\n    // TODO batch action\n    yield put(setField(field));\n    yield put(setGameLevel(level));\n    yield put(setGameLoading(false));\n  } catch (error) {\n    console.log('Error occurred during starting the game.', action, error);\n  }\n}\n","import { takeLatest, Effect } from 'redux-saga/effects';\n\nimport { ActionType } from '../constants';\nimport { startGame } from './startGame';\n\nconst effects: Effect[] = [\n  takeLatest(ActionType.START_GAME, startGame),\n];\n\nexport default effects;\n","\nimport { all, Effect } from 'redux-saga/effects';\n\nimport cellSagas from 'containers/Cell/sagas';\nimport controlsSagas from 'containers/Controls/sagas';\nimport gameFieldSagas from 'containers/GameField/sagas';\n\nexport default function* rootSaga() {\n  const effects: Effect[] = [\n    ...cellSagas,\n    ...controlsSagas,\n    ...gameFieldSagas,\n  ];\n\n  yield all(effects);\n}\n","\nimport { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\n\nimport { LevelLabelByLevel } from 'constant';\nimport { ControlsProps } from './models';\nimport styles from './styles.module.scss';\n\nconst Controls: React.FunctionComponent<ControlsProps> = ({\n  gameLevel,\n  renderWhileSolving,\n  setRenderWhileSolvingValue,\n  finishGame,\n  solveUntilWin,\n  startOver,\n  tryToSolveAutomatically,\n}) => {\n  const disabled = !gameLevel;\n\n  const onRenderChanged: React.ChangeEventHandler<HTMLInputElement> = () => {\n    setRenderWhileSolvingValue(!renderWhileSolving);\n  };\n\n  return (\n    <div className={styles.Controls}>\n\n      <div className={styles.controlsContainer}>\n        <div className={styles.column}>\n          <button onClick={tryToSolveAutomatically} disabled={disabled}>Try to solve automatically</button>\n          <button onClick={solveUntilWin} disabled={disabled}>Solve until the win</button>\n        </div>\n        <div className={styles.column}>\n          <button onClick={startOver} disabled={disabled}>Start over</button>\n          <button onClick={finishGame} disabled={disabled}>Finish the game</button>\n        </div>\n        <div className={styles.column}>\n          <div className={styles.checkbox}>\n            <input type=\"checkbox\" id=\"render\" disabled={disabled} onChange={onRenderChanged} checked={renderWhileSolving} />\n            <label htmlFor=\"render\">Render while solving</label>\n          </div>\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        {gameLevel && <span>{`Level: ${LevelLabelByLevel[gameLevel]}`}</span>}\n      </div>\n\n    </div>\n  );\n};\n\nexport default Controls;\n","import { connect } from 'react-redux';\n\nimport Controls from 'components/Controls';\nimport { setGameLevel, tryToSolveAutomatically, solveUntilWin, startOver, finishGame, setRenderWhileSolvingValue } from './actions';\nimport { gameLevel, renderWhileSolving } from './selectors';\n\nconst mapStateToProps = (state) => ({\n  gameLevel: gameLevel(state),\n  renderWhileSolving: renderWhileSolving(state),\n});\n\nconst mapDispatchToProps = {\n  finishGame,\n  setGameLevel,\n  setRenderWhileSolvingValue,\n  solveUntilWin,\n  startOver,\n  tryToSolveAutomatically,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);\n","import React from 'react';\n\nimport { CellProps } from './models';\nimport styles from './styles.module.scss';\n\nconst Cell: React.FunctionComponent<CellProps> = ({ x, y, value, mines, openItem, setMine }) => {\n  const mine = mines[y][x];\n\n  const onClick = () => {\n    if (!mine) {\n      openItem(x, y);\n    }\n  };\n\n  const rightMouseClick: React.MouseEventHandler<HTMLButtonElement> = (event) => {\n    event.preventDefault();\n    setMine(x, y, !mine);\n  };\n\n  const opened = value !== -1;\n\n  if (opened) {\n    return (\n      <div\n        className={styles.OpenedCell}\n        title={`x: ${x}, y: ${y}`}\n      >\n        {value === 0 ? '' : value}\n      </div>\n    );\n  }\n\n  return (\n    <button\n      className={styles.Cell}\n      onContextMenu={rightMouseClick}\n      onClick={onClick}\n      title={`x: ${x}, y: ${y}`}\n    >\n      {mine ? '!' : ''}\n    </button>\n  );\n};\n\nexport default Cell;\n","import { connect } from 'react-redux';\n\nimport Cell from 'components/Cell';\nimport { setMine } from 'containers/GameField/actions';\nimport { openItem } from './actions';\n\nconst mapStateToProps = (state) => ({\n  mines: state.gameField.mines,\n});\n\nconst mapDispatchToProps = {\n  openItem,\n  setMine,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cell);\n","import { ActionType } from './constants';\nimport { ActionCreator } from './models';\n\nexport const openItem: ActionCreator.OpenItem = (x, y) => ({\n  type: ActionType.OPEN_ITEM,\n  payload: {\n    x,\n    y,\n  },\n});\n","import React from 'react';\n\nimport Cell from 'containers/Cell';\nimport { RowProps } from './models';\n\nconst Row: React.FunctionComponent<RowProps> = ({ row, rowIndex }) => (\n  <>\n    {row.map((value, x) => (\n      <Cell\n        key={x}\n        x={x}\n        y={rowIndex}\n        value={value}\n      />\n    ))}\n  </>\n);\n\nexport default Row;\n","import React, { useState } from 'react';\n\nimport Row from 'components/Row';\nimport { GameLevel, GAME_LEVELS, LevelLabelByLevel } from 'constant';\nimport { GameFieldProps } from './models';\nimport styles from './styles.module.scss';\n\nconst GameField: React.FunctionComponent<GameFieldProps> = ({ field, gameLevel, loading, startGame }) => {\n  const [selectedLevel, setLevel] = useState(gameLevel ?? GAME_LEVELS[0]);\n\n  const onStartGameClick: React.MouseEventHandler<HTMLButtonElement> = (): void => {\n    startGame(selectedLevel);\n  };\n\n  if (loading) {\n    return <div className={styles.loading}>Loading...</div>;\n  }\n\n  if (!gameLevel) {\n    return (\n      <div className={styles.chooseLevel}>\n        <h2>Choose game level:</h2>\n        <form>\n          {GAME_LEVELS.map((level) => (\n            <div key={level} className={styles.option}>\n              {getRadioButton(level, LevelLabelByLevel[level], setLevel, selectedLevel === level)}\n            </div>\n          ))}\n        </form>\n        <button onClick={onStartGameClick}>START GAME</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.GameField} style={{ gridTemplateColumns: `repeat(${field[0].length}, 40px)`, gridAutoRows: '40px' }}>\n      {field.map((row, index) => (\n        <Row key={index} rowIndex={index} row={row} />\n      ))}\n    </div>\n  );\n};\n\nexport default GameField;\n\nconst getRadioButton = (id: GameLevel, label: string, onClick: (id: GameLevel) => void, checked: boolean): JSX.Element => (\n  <>\n    <input type=\"radio\" id={id} name=\"level\" onChange={(event) => event.target.checked && onClick(id)} checked={checked} />\n    <label htmlFor={id}>{label}</label>\n  </>\n);\n","import { connect } from 'react-redux';\n\nimport GameField from 'components/GameField';\nimport { startGame } from './actions';\n\nconst mapStateToProps = (state) => ({\n  field: state.gameField.field,\n  gameLevel: state.controls.gameLevel,\n  loading: state.controls.loading,\n});\n\nconst mapDispatchToProps = {\n  startGame,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameField);\n","import React from 'react';\n\nimport Controls from 'containers/Controls';\nimport GameField from 'containers/GameField';\nimport styles from './styles.module.scss';\n\nconst Game: React.FunctionComponent = () => (\n  <div className={styles.Game}>\n    <header>\n      <h1 className={styles.gameTitle}>Minesweeper</h1>\n      <Controls />\n    </header>\n    <main className={styles.main}>\n      <GameField />\n    </main>\n  </div>\n);\n\nexport default Game;\n","\nimport React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Game from 'components/Game';\n\nimport 'normalize.css/normalize.css';\n\nconst App: React.FunctionComponent = () => (\n  <BrowserRouter>\n    <Game />\n  </BrowserRouter>\n);\n\nexport default App\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"styles_Controls__1i-bK\",\"controlsContainer\":\"styles_controlsContainer__1P3EV\",\"column\":\"styles_column__10bZm\",\"checkbox\":\"styles_checkbox__1vrZ6\",\"info\":\"styles_info__wrWx5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameField\":\"styles_GameField__3hfdo\",\"chooseLevel\":\"styles_chooseLevel__2tKrR\",\"option\":\"styles_option__uKuOJ\",\"loading\":\"styles_loading__292K4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"styles_Game__116Rh\",\"gameTitle\":\"styles_gameTitle__kjZDa\",\"main\":\"styles_main__1nWvf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cell\":\"styles_Cell__n-J5i\",\"OpenedCell\":\"styles_OpenedCell__1lhV4\"};"],"sourceRoot":""}